demo()
glm()
GLM.VR
glm.vr
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("manipulate", "mgcv"))
clear
close
exit
sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
exit()
quit
1 + 26+40+34+23+26+20+30+15
1 + 26+40+34+23+26+20+30+15 / 60
(1 + 26+40+34+23+26+20+30+15) / 60
(1+6+17+10+15+6+7+5) / 60
(1+8+7+8+4)
1+19+29+22+29+27+18+30+38
(1+19+29+22+29+27+18+30+38)/60
q()
sd(c(5,8,12))
which.min(c(4,1,6))
60 * (15/24)^(1.3-1)
1.71(515-490)
1.71*(515-490)
101*1000*30/ (1200 * 8.314)
(101*1000*30/ (1200 * 8.314)) - 273
10 * (10/7)^2
4.18 * 65
16*8.314*373.15
30 * (.08 *22.6)^1.3
1000*5 * 3.14 * 1.5^2
1000*5 * 3.14 * (1.5)^2
5.34^2 * 936 / 30
333 * (24/15)^0.3
333 * (15/24)^0.3
(101*1000*15*20*5)/(8.314*298.15)
(28.966*101*15*20*5)/(8.314*298.15)
15 * (7/8)^2
quit(0)
exit(0)
exit()
quit("yes")
a = c(100,90,70,65,85)
mean(a)
a = a -mean(a)
a = a^2
sum(a)
a = c(100,90,70,65,85)
sd(a)
a = c(45,80,95,55,30)
a = a - mean(a)
a = a ^2
sum(a)
a = c(45,80,95,55,30)
b = c(40,80,140,60,20)
b = b - a
b = b ^ 2
sum(b)
1 - (2175/2770)
day = c(1,25,46,76,140)
act = c(5,15,22,32,77)
line1 = 0.6 * day
line 2 = 0.5 * day
line2 = 0.5 * day
SST = sum((act - mean(act))^2)
SSE1 = sum((act - line1)^2)
SSE2 = sum((act - line2)^2)
1 - SSE1/SST
1 - SSE2/SST
install.packages("caret")
library(caret)
q()
setwd("~/Documents/01_Courses/13_Analytics_edge_MIT/06_Unit6/03_Assignment")
source('~/Documents/01_Courses/13_Analytics_edge_MIT/06_Unit6/03_Assignment/airline_assignment.R')
rm(list = ls())
stocks = read.csv("StocksCluster.csv")
str(stocks)
summary(stocks)
prop.table(table(stocks$PositiveDec))
cor(stocks)
abs(cor(stocks))
max(abs(cor(stocks)))
sort(abs(cor(stocks)))
which.max(sapply(stocks,mean))
colMeans(stocks)
sort(colMeans(stocks))
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec ~ ., data = stocksTrain, family = "binomial")
Stockspredict = predict(StocksModel)
Stockspredict = predict(StocksModel)
t = 0.5
a = table(stocksTrain$PositiveDec, Stockspredict >= t)
accuracy = (a[1] + a[4])/ sum(a)
accuracy
Stockspredict = predict(StocksModel,type ="response")
t = 0.5
a = table(stocksTrain$PositiveDec, Stockspredict >= t)
accuracy = (a[1] + a[4])/ sum(a)
accuracy
StocksModel = glm(PositiveDec ~ ., data = stocksTrain, family = binomial)
PredictTrain = predict(StocksModel, type="response")
t = 0.5
a = table(stocksTrain$PositiveDec, Stockspredict >= t)
accuracy = (a[1] + a[4])/ sum(a)
accuracy
rm(list = ls())
stocks = read.csv("StocksCluster.csv")
str(stocks)
summary(stocks)
prop.table(table(stocks$PositiveDec))
sort(abs(cor(stocks)))
sort(colMeans(stocks))
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec ~ ., data = stocksTrain, family = binomial)
PredictTrain = predict(StocksModel, type="response")
t = 0.5
a = table(stocksTrain$PositiveDec, PredictTrain >= t)
accuracy = (a[1] + a[4])/ sum(a)
accuracy
PredictTest = predict(StocksModel, newdata = stocksTest,type="response")
t = 0.5
PredictTest = predict(StocksModel, newdata = stocksTest,type="response")
t = 0.5
a = table(stocksTest$PositiveDec, PredictTest >= t)
accuracyTest = (a[1] + a[4])/ sum(a)
accuracyTest
accuracyBlTest = prop.table(table(stocksTest$PositiveDec))
accuracyBlTest
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
colMeans(normTrain)
colMeans(normTest)
set.seed(144)
km = kmeans(normTrain, centers = 3)
km
km$centers
km$size
km$size
library(flexclust)
km.kcca = as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata=normTest)
table(clusterTest)
stocksTest1 = subset(stocksTest, clusterTest == 1)
stocksTest2 = subset(stocksTest, clusterTest == 2)
stocksTest3 = subset(stocksTest, clusterTest == 3)
mean(stocksTest1$PositiveDec)
mean(stocksTest2$PositiveDec)
mean(stocksTest3$PositiveDec)
stocksTrain1 = subset(stocksTrain, clusterTrain == 1)
stocksTrain2 = subset(stocksTrain, clusterTrain == 2)
stocksTrain3 = subset(stocksTrain, clusterTrain == 3)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain2$PositiveDec)
mean(stocksTrain3$PositiveDec)
StocksModel1 = glm(PositiveDec ~ ., data = stocksTrain1, family = binomial)
StocksModel2 = glm(PositiveDec ~ ., data = stocksTrain2, family = binomial)
StocksModel3 = glm(PositiveDec ~ ., data = stocksTrain3, family = binomial)
summary(StocksModel1)
summary(StocksModel2)
summary(StocksModel3)
StocksModel1$coefficients
StocksModel1$coefficients
StocksModel1$coefficients
StocksModel1$coefficients
StocksModel2$coefficients
StocksModel3$coefficients
sign(StocksModel1$coefficients)
sign(StocksModel2$coefficients)
sign(StocksModel3$coefficients)
sign(StocksModel1$coefficients) +
sign(StocksModel2$coefficients) +
sign(StocksModel3$coefficients)
StocksModel1$y
PredAccuracy <- function(model, testdata){
PredictTest = predict(model, newdata = testdata,type="response")
t = 0.5
a = table(model$PositiveDec, PredictTest >= t)
accuracy = (a[1] + a[4])/ sum(a)
accuracy
}
accuracy.SM1 = PredAccuracy(StocksModel1, stocksTest1)
PredAccuracy <- function(model, testdata){
PredictTest = predict(model, newdata = testdata,type="response")
t = 0.5
a = table(testdata$PositiveDec, PredictTest >= t)
accuracy = (a[1] + a[4])/ sum(a)
accuracy
}
accuracy.SM1 = PredAccuracy(StocksModel1, stocksTest1)
accuracy.SM1
accuracy.SM2 = PredAccuracy(StocksModel2, stocksTest2)
accuracy.SM2
accuracy.SM3 = PredAccuracy(StocksModel3, stocksTest3)
accuracy.SM3
PredictTest1 = predict(StocksModel1, newdata = stocksTest1, type="response")
PredictTest2 = predict(StocksModel2, newdata = stocksTest2, type="response")
PredictTest3 = predict(StocksModel3, newdata = stocksTest3, type="response")
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
a = table(AllOutcomes, AllPredictions >= t)
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
t = 0.5
a = table(AllOutcomes, AllPredictions >= t)
accuracy.all = (a[1] + a[4])/ sum(a)
accuracy.all
rm(list = ls())
q()
