demo()
glm()
GLM.VR
glm.vr
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("manipulate", "mgcv"))
clear
close
exit
sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
exit()
quit
1 + 26+40+34+23+26+20+30+15
1 + 26+40+34+23+26+20+30+15 / 60
(1 + 26+40+34+23+26+20+30+15) / 60
(1+6+17+10+15+6+7+5) / 60
(1+8+7+8+4)
1+19+29+22+29+27+18+30+38
(1+19+29+22+29+27+18+30+38)/60
q()
sd(c(5,8,12))
which.min(c(4,1,6))
60 * (15/24)^(1.3-1)
1.71(515-490)
1.71*(515-490)
101*1000*30/ (1200 * 8.314)
(101*1000*30/ (1200 * 8.314)) - 273
10 * (10/7)^2
4.18 * 65
16*8.314*373.15
30 * (.08 *22.6)^1.3
1000*5 * 3.14 * 1.5^2
1000*5 * 3.14 * (1.5)^2
5.34^2 * 936 / 30
333 * (24/15)^0.3
333 * (15/24)^0.3
(101*1000*15*20*5)/(8.314*298.15)
(28.966*101*15*20*5)/(8.314*298.15)
15 * (7/8)^2
quit(0)
exit(0)
exit()
quit("yes")
a = c(100,90,70,65,85)
mean(a)
a = a -mean(a)
a = a^2
sum(a)
a = c(100,90,70,65,85)
sd(a)
a = c(45,80,95,55,30)
a = a - mean(a)
a = a ^2
sum(a)
a = c(45,80,95,55,30)
b = c(40,80,140,60,20)
b = b - a
b = b ^ 2
sum(b)
1 - (2175/2770)
day = c(1,25,46,76,140)
act = c(5,15,22,32,77)
line1 = 0.6 * day
line 2 = 0.5 * day
line2 = 0.5 * day
SST = sum((act - mean(act))^2)
SSE1 = sum((act - line1)^2)
SSE2 = sum((act - line2)^2)
1 - SSE1/SST
1 - SSE2/SST
install.packages("caret")
library(caret)
q()
getwd()
setwd("/Users/VirKrupa/Documents/07_kaggle/01_caterpiller_tube_pricing/script/")
options(scipen = 10)
###
### Build train and test db
###
### Load train and test
test = read.csv("../input/test_set.csv")
train = read.csv("../input/train_set.csv")
str(train)
source('~/.active-rstudio-document')
str(test)
summary(test)
setwd("~/Documents/01_Courses/13_Analytics_edge_MIT/06_Unit6/01_Lecture")
movies = read.table("movieLens.txt", header=FALSE, sep="|",quote="\"")
str(movies)
# Add column names
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
str(movies)
g = c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
t= c((0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0))
t= c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
g - t
sum((g - t) ^ 2)
sqrt(sum((g - t) ^ 2))
rm(list = ls())
movies = read.table("movieLens.txt", header = F , sep = "|", quote = "\"")
str(movies)
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
str(movies)
movies$ID = NULL
str(movies)
movies$VideoReleaseDate = NULL
movies$ReleaseDate = NULL
str(movies)
movies = unique(movies)
str(movies)
summary(movies)
sum(movies$Comedy)
sum(movies$Western)
table(movies$Romance, movies$Drama)
distances = dist(movies[2:20], method = "euclidean")
distances = dist(movies[2:20], method = "euclidean")
clusterMovies = hclust(distances, method= "ward.D")
plot(clusterMovies)
summary(distances)
is.na(distances)
sum(is.na(distances))
movies = read.table("movieLens.txt", header=FALSE, sep="|",quote="\"")
str(movies)
# Add column names
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
str(movies)
# Remove unnecessary variables
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL
# Remove duplicates
movies = unique(movies)
# Take a look at our data again:
str(movies)
# Video 7
# Compute distances
distances = dist(movies[2:20], method = "euclidean")
# Hierarchical clustering
clusterMovies = hclust(distances, method = "ward")
clusterMovies = hclust(distances, method = "ward.D")
plot(clusterMovies)
clusterGroups = cutree(clusterMovies, k = 10)
tapply(movies$Action, clusterGroups, mean)
spl = split(movies[2:20], clusterGroups)
lapply(spl, colMeans)
tapply(movies$Romance, clusterGroups, mean)
data.clust = lapply(spl, colMeans)
data.clust
subset(movies, Title == "Men in Black (1997)")
clusterGroups[257]
cluster2 = subset(movies, clusterGroups == 2)
head(cluster2)
head(cluster2$Title)
cluster2$Title [1:10]
clusterGroups = cutree(clusterMovies, k = 2)
spl = split(movies[2:20], clusterGroups)
lapply(spl, colMeans)
6500*.2
1300 + 4800
2800 + 1840 + 100 + 3800
8540 - 6100
2440 * 70
rm (list = ls())
getwd()
setwd("~/Documents/01_Courses/13_Analytics_edge_MIT/06_Unit6/02_Recitation")
flower = read.csv("flower.csv", header =  F)
str(flower)
?scale
scale(c(1,2,3,4,5,6,7,8))
scale(c(1,2,3,4,5,6,7,8), center = F)
scale(c(1,2,3,4,5,6,7,8), scale = F)
a <- scale(c(1,2,3,4,5,6,7,8))
summary(a)
a
sd(a)
a <- c(1,2,3,4,5,6,7,8)
sd(a)
(a - mean(a))/ sd(a)
b <- (a - mean(a))/ sd(a)
sd(flower)
rm(a,b)
flowerMatrix = as.matrix(flower)
flowerMatrix
str(flowerMatrix)
flowerVector = as.vector(flowerMatrix)
str(flowerVector)
flowerVector = as.vector(flower)
flowerVector = as.vector(flowerMatrix)
distance = dist(flowerVector, method = "eculidean")
distance = dist(flowerVector, method = "eculidian")
?method
?dist
distance = dist(flowerVector, method = "euclidean")
str(distance)
distance
clusterIntensity = hclust(distance, method = "ward.D")
plot(clusterIntensity)
rect.hclust(clusterIntensity, k = 3, border="red")
flowerClusters = cutree(clusterIntensity, k = 3)
flowerClusters
taaply(flowerVector, flowerClusters, mean)
tapply(flowerVector, flowerClusters, mean)
dim(flowerClusters) = c(50,50)
flowerClusters
image(flowerClusters, axes = F)
image(flowerMatrix, axes = F)
image(flowerMatrix, axes = F, col =gray(seq(0,1,length = 256))
)
rm(list = ls())
healthy = read.csv("healthy.csv", header = F)
heqalthyMatrix = as.matrix(healthy)
healthyMatrix = as.matrix(healthy)
image(healthyMatrix, col = gray(seq(0,1,length = 256)))
healthyVector = as.vector(healthyMatrix)
str(healthyVector)
distance = dist(healthyMatrix, method = "euclidean")
str(distance)
del(distance)
rm(distance,heqalthyMatrix)
k = 5
set.seed(1)
KMC = kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
healthyClusters = KMC$cluster
KMC$centers
KMC$size
dim(healthyClusters) = c(566,566)
dim(healthyClusters) = c(nrow(healthyMatrix), ncol(healthyMatrix))
image(healthyClusters)
image(healthyClusters, axes = F, col = rainbow[k])
image(healthyClusters, axes = F, col = rainbow(k)
)
