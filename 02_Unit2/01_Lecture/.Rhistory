demo()
glm()
GLM.VR
glm.vr
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("manipulate", "mgcv"))
clear
close
exit
sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
exit()
quit
1 + 26+40+34+23+26+20+30+15
1 + 26+40+34+23+26+20+30+15 / 60
(1 + 26+40+34+23+26+20+30+15) / 60
(1+6+17+10+15+6+7+5) / 60
(1+8+7+8+4)
1+19+29+22+29+27+18+30+38
(1+19+29+22+29+27+18+30+38)/60
q()
sd(c(5,8,12))
which.min(c(4,1,6))
# VIDEO 2
source('~/Documents/01_Courses/13_Analytics_edge_MIT/01_Unit1/01_Lecture/Unit1_IntroductionR.R')
setwd("~/Documents/01_Courses/13_Analytics_edge_MIT/01_Unit1/01_Lecture")
source('~/Documents/01_Courses/13_Analytics_edge_MIT/01_Unit1/01_Lecture/Unit1_IntroductionR.R')
8* 6
2^16
2^
8* 10
sqrt(2)
abs(-65)
?sqrt
SquareRoot2 = sqrt(2)
SquareRoot2
HoursYear <- 365*24
HoursYear
ls()
rm(ls())
rm.ls()
rm
c(2,3,5,8,13)
Country = c("Brazil","China","India","Switzerland","USA")
LifeExpectancy = c(74,76,65,83,79)
Country = c("Brazil", "China", "India","Switzerland","USA")
LifeExpectancy = c(74,76,65,83,79)
Country
LifeExpectancy
Country[1]
LifeExpectancy[3]
Sequence = seq(0,100,2)
Sequence
CountryData = data.frame(Country,LifeExpectancy)
CountryData
CountryData$Population = c(199000,1390000,1240000,7997,318000)
CountryData
Country = c("Australia","Greece")
LifeExpectancy=c(82,81)
Population = c(23050,11125)
NewCountryData = data.frame(Country,LifeExpectancy,Population)
NewCountryData
AllCountryData = rbind(CountryData,NewCountryData)
AllCountryData
getwd()
WHO = read.csv("WHO.csv")
str(WHO)
summary(WHO)
WHO_Europe = subset(WHO, Region == "Europe")
str(WHO_Europe)
write.csv(WHO_Europe,"WHO_Europe.csv")
rm(WHO_Europe)
rm(ls())
ls()
Under15
WHO$Under15
mean(WHO$Under15)
sd(WHO$Under15)
summary(WHO$Under15)
which.min(WHO$Under15)
WHO$Country[86]
which.max(WHO$Under15)
WHO$Country[124]
WHO$Country[which.min(WHO$Under15)]
WHO$Country[which.max(WHO$Under15)]
plot(WHO$GNI, WHO$FertilityRate)
Outliers = subset(WHO, GNI > 10000 & FertilityRate > 2.5)
nrow(Outliers)
Outliers
Outliers[c("Country", "GNI","FertilityRate")]
mean(WHO$Over60)
WHO$Country[which.max(WHO$Over60)]
WHO$Country[which.max(WHO$LiteracyRate)]
WHO$Country[which.min(WHO$Over60)]
hist(WHO$CellularSubscribers)
boxplot(WHO$LifeExpectancy ~ WHO$Region)
boxplot(WHO$LifeExpectancy ~ WHO$Region, xlab = "", ylab = "LifeExpectancy", main = "Life Expectancy of Cointries by Region")
table(WHO$Region)
tapply(WHO$Over60, WHO$Region, mean)
tapply(WHO$LiteracyRate, WHO$Region, min)
tapply(WHO$LiteracyRate, WHO$Region, min, na.rm = T)
str(WHO)
tapply(WHO$ChildMortality, WHO$Region, mean)
min(tapply(WHO$ChildMortality, WHO$Region, mean))
which.min(tapply(WHO$ChildMortality, WHO$Region, mean))
setwd("~/Documents/01_Courses/13_Analytics_edge_MIT/01_Unit1/02_Recitation")
getwd()
USDA = read.csv("USDA.csv")
str(USDA)
summary(USDA)
USDA$Sodium
which.max(USDA$Sodium)
names(USDA)
USDA$Description[which.max(USDA$Sodium)]
HighSodium = subset(USDA, Sodium > 10000)
nrow(HighSodium)
HighSodium$Description
match("CAVIAR", USDA$Description)
USDA$Sodium[match("CAVIAR", USDA$Description)]
sd(USDA$Sodium, na.rm = T)
?match
match
summary(USDA$Sodium)
plot(USDA$Protein, USDA$TotalFat)
plot(USDA$Protein, USDA$TotalFat, xlab = "Protein", ylab = "TotalFat", main = "Protein Vs. Total Fat")
plot(USDA$Protein, USDA$TotalFat, xlab = "Protein", ylab = "TotalFat", main = "Protein Vs. Total Fat", col = "red")
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Hostogram of Vitamin C")
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Hostogram of Vitamin C", xlim = c(0,100))
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Hostogram of Vitamin C", xlim = c(0,100), breaks = 100)
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Hostogram of Vitamin C", xlim = c(0,100), breaks = 2000)
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Hostogram of Vitamin C", xlim = c(1,100), breaks = 100)
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Hostogram of Vitamin C", xlim = c(10,100), breaks = 100)
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Hostogram of Vitamin C", xlim = c(20,100), breaks = 100)
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Hostogram of Vitamin C", xlim = c(20,100), breaks = 1000)
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Hostogram of Vitamin C", xlim = c(50,100), breaks = 1000)
hist(USDA$VitaminC, xlab = "Vitamin C (mg)", main = "Hostogram of Vitamin C", xlim = c(50,100), breaks = 2000)
boxplot(USDA$Sugar, ylab = "Sugar (g)", main = "Boxplots of sugar levels")
HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm = T))
str(HighSodium)
USDA$HighSoidum = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm = T))
USDA$HighCarbs = as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate, na.rm = T))
USDA$HighProtein = as.numeric(USDA$Protein > mean(USDA$Protein, na.rm = T))
USDA$HighFat = as.numeric(USDA$TotalFat > mean(USDA$TotalFat, na.rm = T))
str(USDA)
summary(USDA)
sum(USDA$HighCarbs)
sum(USDA$HighCarbs, na.rm = T)
str(USDA)
mean(USDA$HighCarbs, na.rm = T)
table(USDA$HighSoidum)
table(USDA$HighSoidum, USDA$HighFat)
table( USDA$HighFat)
tapply(USDA$Iron, USDA$HighProtein,mean,na.rm=T)
tapply(USDA$VitaminC, USDA$HighCarbs,max,na.rm=T)
tapply(USDA$VitaminC, USDA$HighCarbs,summary,na.rm=T)
setwd("~/Documents/01_Courses/13_Analytics_edge_MIT/01_Unit1/03_Assignment")
mvtweek1 = read.csv("mvtWeek1.csv")
str(mvtweek1)
max(mvtweek1$ID)
min(mvtweek1$Beat)
table(mvtweek1$Arrest)
match("ALLEY", mvtweek1$LocationDescription)
summary(mvtweek1$LocationDescription)
summary(mvtweek1)
match("ALLEY", mvtweek1$LocationDescription)
summary(mvtweek1$LocationDescription)
table(mvtweek1$LocationDescription)
table(mvtweek1$LocationDescription)
summary(mvtweek1$LocationDescription)
names(mvtweek1)
mvtweek1$Date[1]
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
View(mvtweek1)
rm(mvtweek1)
source('~/Documents/01_Courses/13_Analytics_edge_MIT/01_Unit1/03_Assignment/Analysis_Detective.R')
summary(DateConvert)
mvt$Month = months(DateConvert)
mvt$Weekday = weekdays(DateConvert)
mvt$Date = DateConvert
names(mvt)
table(mvt$Month)
which.min(table(mvt$Month))
which.max(table(mvt$Weekday))
tapply(mvt$Month,mvt$Arrest,max)
tapply(mvt$Month,mvt$Arrest,max,na.rm = T)
table(mvt$Month,mvt$Arrest,max,na.rm = T)
table(mvt$Month,mvt$Arrest)
tapply(mvt$Arrest,mvt$Month,max,na.rm = T)
table(mvt$Arrest, mvt$Month)
max(table(mvt$Arrest, mvt$Month))
max(table(mvt$Arrest == TRUE, mvt$Month))
table(mvt$Arrest == TRUE, mvt$Month)
hist(mvt$Date, breaks=100)
boxplot(mvt$Date ~ mvt$Arrest)
names(mvt)
table(mvt$Year, mvt$Arrest)
table(mvt$Year, mvt$Arrest) [1]
table(mvt$Year, mvt$Arrest) [2]
table(mvt$Year, mvt$Arrest) [14]
table(mvt$Year, mvt$Arrest) ['2001']
2152 / (18517 + 2152)
1212/(1212+13068)
550/ 550+13542
550/ (550+13542)
sort(table(mvt$LocationDescription))
sort
sort(table(mvt$LocationDescription),decreasing = T)
sort(table(mvt$LocationDescription),decreasing = T) [1:6]
a = sort(table(mvt$LocationDescription),decreasing = T) [1:6]
a
a[1]
names(a)
sort(names(a))
top5name = c("PARKING LOT/GARAGE(NON.RESID.)", "STREET","ALLEY","DRIVEWAY - RESIDENTIAL","GAS STATION")
top5name
Top5 = subset(mvt, LocationDescription == top5name)
Top5 = subset(mvt, LocationDescription == top5name[1] | LocationDescription == top5name[2] |
LocationDescription == top5name[3] | LocationDescription == top5name[4] |
LocationDescription == top5name[5])
sumary(Top5
)
summary(Top5)
str(Top5)
Top51 = subset(mvt, LocationDescription %in% top5name)
Top5$LocationDescription = factor(Top5$LocationDescription)
str(Top5)
table(Top5$LocationDescription,Top5$Arrest)
tapply(Top5$LocationDescription,Top5$Arrest,summary)
tapply(Top5$Arrest, Top5$LocationDescription, sort)
names(Top5)
GasStation = subset(Top5,LocationDescription = "GAS STATION")
GasStation$LocationDescription = factor(GasStation$LocationDescription)
table(GasStation$Arrest, GasStation$Weekday)
table(Top5$LocationDescription,Top5$Weekday)
IBM = read.csv("IBMStock.csv")
IBM$Date = as.Date(IBM$Date, "%m/%d/%y")
GE = read.csv("GEStock.csv")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola = read.csv("CocaColaStock.csv")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
ProcterGamble = read.csv("ProcterGambleStock.csv")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
Boeing = read.csv("BoeingStock.csv")
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
summary(Boeing)
summary(IBM)
summary(GE)
summary(CocaCola)
sd(ProcterGamble$StockPrice)
plot(CocaCola$Date, CocaCola$StockPrice, type='l', col = "red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
lines(ProcterGamble$Date, ProcterGamble$StockPrice,col="blue")
abline(v=as.Date(c("2000-03-01")), lwd=2)
abline(v=as.Date(c("1983-01-01")), lwd=2)
], CocaCola$StockPrice[301:432], type="l", col="red",ylim=c(0,210))
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red",ylim=c(0,210))
lines(IBM$Date[301:432], IBM$StockPrice[301:432], type="l", col="blue")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], type="l", col="green")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], type="l", col="orange")
lines(GE$Date[301:432], GE$StockPrice[301:432], type="l", col="black")
abline(v=as.Date(c("2002-01-01")), lwd=2, lty= 2)
abline(v=as.Date(c("2000-01-01")), lwd=2, lty= 2)
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red",ylim=c(0,210))
lines(IBM$Date[301:432], IBM$StockPrice[301:432], type="l", col="blue")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], type="l", col="green")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], type="l", col="orange")
lines(GE$Date[301:432], GE$StockPrice[301:432], type="l", col="black")
abline(v=as.Date(c("1997-10-01")), lwd=2, lty = 2)
abline(v=as.Date(c("1997-11-01")), lwd=2, lty = 3)
IBM
IBM[334,]
IBM[334:335,]
GE[334:335,]
CocaCola[334:335,]
Boeing[334:335,]
ProcterGamble[334:335,]
ProcterGamble[333:335,]
months(IBM$Date)
IBM$Month = months(IBM$Date)
CocaCola$Month = months(CocaCola$Date)
str(IBM)
table(IBM$StockPrice,IBM$Month,mean)
tapply(IBM$StockPrice,IBM$Month,mean)
tapply(IBM$StockPrice,IBM$Month,mean) > mean(IBM$StockPrice)
sort(tapply(IBM$StockPrice,IBM$Month,mean) > mean(IBM$StockPrice))
table(tapply(IBM$StockPrice,IBM$Month,mean) > mean(IBM$StockPrice))
summary(tapply(IBM$StockPrice,IBM$Month,mean) > mean(IBM$StockPrice))
tapply(GE$StockPrice,months(GE$Date),max)
max(tapply(GE$StockPrice,months(GE$Date),max))
which.max(tapply(GE$StockPrice,months(GE$Date),max))
which.max(tapply(CocaCola$StockPrice,months(CocaCola$Date),max))
which.max(tapply(GE$StockPrice,months(GE$Date),mean))
which.max(tapply(CocaCola$StockPrice,months(CocaCola$Date),mean))
tapply(GE$StockPrice,months(GE$Date),mean)
(tapply(CocaCola$StockPrice,months(CocaCola$Date),mean))
tapply(IBM$StockPrice,IBM$Month,mean)
ls
ls(all.names = T)
rm(list = ls())
rm
CPS = read.csv("CPSData.csv")
str(CPS)
summary(CPS)
CountryMap = read.csv("CountryCodes.csv")
MetroAreaMap = read.csv("MetroAreaCodes.csv")
CPS = merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
CPS = merge(CPS, CountryMap, by.x="CountryOfBirthCode", by.y="Code", all.x=TRUE)
str(CPS)
table(CPS$Industry)
which.max(table(CPS$Industry))
sort(table(CPS$Industry))
which.max(table(CPS$Industry))
names(CPS)
sort(table(CPS$State))
which.min(table(CPS$State))
which.max(table(CPS$State))
names(CPS)
table(CPS$Citizenship)
table(CPS$Citizenship)/sum(table(CPS$Citizenship))
116639 + 7073
1- (table(CPS$Citizenship)/sum(table(CPS$Citizenship)))
table(CPS$Race,CPS$Hispanic)
table(CPS$Race,CPS$Hispanic) > 250
summary(CPS)
table(CPS$Region, is.na(CPS$Married))
tableCPS$Sex, is.na(CPS$Married))
table(CPS$Sex, is.na(CPS$Married))
table(CPS$Age, is.na(CPS$Married))
table(CPS$State, is.na(CPS$MetroArea))
table(CPS$Region, is.na(CPS$MetroArea))
table(CPS$Region, is.na(CPS$MetroArea)) / table(CPS$Region)
tapply(CPS$State, is.na(CPS$MetroArea),mean)
tapply(is.na(CPS$MetroArea),CPS$State,mean)
sort(tapply(is.na(CPS$MetroArea),CPS$State,mean))
str(MetroAreaMap)
str(CountryMap)
names(CPS)
summary(CPS)
which.max(table(CPS$MetroArea))
table(CPS$MetroArea)
names(table(CPS$MetroArea))
sort(table(CPS$MetroArea))
sort(tapply(CPS$Hispanic,CPS$MetroArea,mean))
tapply(CPS$Race=="Asian",CPS$MetroArea,mean)
tapply(CPS$Race=="Asian",CPS$MetroArea,mean) > 0.2
sum(tapply(CPS$Race=="Asian",CPS$MetroArea,mean) > 0.2)
sort(tapply(CPS$Race=="Asian",CPS$MetroArea,mean) > 0.2)
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, rm.na = T))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean))
?rm.na
?na.rm
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm= T))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm= T))
summary(CPS)
str(CPS)
tapply(CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA,CPS$Country,mean)
)
tapply(CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",CPS$Country,mean)
tapply(CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",CPS$Country,mean,na.rm = T)
1 - 0.04528869
tapply(CPS$Country,CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",mean,na.rm = T)
table(CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA")
table(CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA" , country)
table(CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA" , CPS$Country)
table(CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA" , CPS$Country == "United States")
3736/(5409+3736)
1 - (3736/(5409+3736))
table(CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA" , CPS$Country != "United States")
1668/(1668+3736)
tapply(CPS$Country=="India",CPS$MetroArea,mean,na.rm = T)
sort(tapply(CPS$Country=="India",CPS$MetroArea,mean,na.rm = T))
table(CPS$Country=="India",CPS$MetroArea)
tapply(CPS$Country=="India",CPS$MetroArea,mean,na.rm = T)
tapply(CPS$Country=="India",CPS$MetroArea,sum,na.rm = T)
sort(tapply(CPS$Country=="India",CPS$MetroArea,sum,na.rm = T))
sort(tapply(CPS$Country=="Brazil",CPS$MetroArea,sum,na.rm = T))
sort(tapply(CPS$Country=="Somalia",CPS$MetroArea,sum,na.rm = T))
sort(tapply(CPS$Country=="India",CPS$MetroArea,sum,na.rm = T))
sort(tapply(CPS$Country=="Brazil",CPS$MetroArea,sum,na.rm = T))
sort(tapply(CPS$Country=="Somalia",CPS$MetroArea,sum,na.rm = T))
rm(list=ls())
poll = read.csv("AnonymityPoll.csv")
str(poll)
summary(poll)
table(poll$Smartphone)
472+487
472+487+43
table(poll$Region,poll$State)
table(poll$State,poll$Region)
table(poll$Smartphone)
table(poll$Internet.Use)
?table
table(poll$Smartphone,poll$Internet.Use)
sum(is.na(poll$Smartphone))
sum(is.na(poll$Internet.Use))
summary(poll)
str(poll)
limited = subset(poll,poll$Smartphone == 1 | poll$Internet.Use == 1 )
str(limited)
summary(limited)
sum(limited$Info.On.Internet == 0)
sum(limited$Info.On.Internet == 11)
table(limited$Worry.About.Info, useNA = T)
?table
table(limited$Worry.About.Info, useNA = "always")
table(limited$Anonymity.Possible)
table(limited$Tried.Masking.Identity)
table(limited$Privacy.Laws.Effective)
sum(table(limited$Privacy.Laws.Effective))
hist(limited$Age)
plot(limited$Age, limited$Info.On.Internet)
table(limited$Age, limited$Info.On.Internet)
max(table(limited$Age, limited$Info.On.Internet))
jitter(c(1, 2, 3))
plot(jitter(limited$Age), jitter(limited$Info.On.Internet))
tapply(limited$Info.On.Internet,limited$Smartphone,summary)
tapply(limited$Tried.Masking.Identity,limited$Smartphone,summary)
tapply(limited$Tried.Masking.Identity,limited$Smartphone,sum)
tapply(limited$Tried.Masking.Identity,limited$Smartphone,sum,na.rm = T)
93/(33+93)
33/(33+93)
tapply(limited$Tried.Masking.Identity,limited$Smartphone,table)
getwd
getwd()
setwd("/Users/VirKrupa/Documents/01_Courses/13_Analytics_edge_MIT/01_Unit1")
getwd()
ls
dir
dir()
setwd("/Users/VirKrupa/Documents/01_Courses/13_Analytics_edge_MIT/01_Unit1/01_Lecture")
dir()
setwd("/Users/VirKrupa/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2/01_Lecture")
setwd("/Users/VirKrupa/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2")
setwd("/Users/VirKrupa/Documents/01_Courses/13_Analytics_edge_MIT")
dir()
dir()
cd
setwd("/Users/VirKrupa/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2/01_Lecture/")
getwd
getwd()
ls
dir()
rm(list=ls())
wine = read.csv("wine.csv")
str(wine)
summary(wine)
model1 = lm(Price ~ AGST, data = wine)
summary(model1)
model1$residuals
SSE = sum(model1$residuals^2)
SSE
model2 = lm(Price ~ AGST + HarvestRain, data= wine)
summary(model2)
SSE = sum(model2$residuals^2)
SSE
names(wine)
model3 = lm(Price ~ AGST + HarvestRain + WinterRain +Age + FrancePop, data= wine)
summary(model3)
SSE = sum(model3$residuals^2)
SSE
modelquiz = lm(Price ~ HarvestRain + WinterRain, data= wine)
summary(modelquiz)
summary(model3)
model4 = lm(Price ~ AGST + HarvestRain + WinterRain + Age, data= wine)
summary(model4)
summary(model3)
summary(model4)
summary(modelquiz)
cor(wine$WinterRain, wine$Price)
cor(wine$HarvestRain, wine$AGST)
cor(wine$Age, wine$FrancePop)
cor(wine)
model5 = lm(Price ~ AGST + HarvestRain + WinterRain, data= wine)
summary(model5)
model6 = lm(Price ~ AGST + HarvestRain + Age, data= wine)
summary(model6)
summary(model4)
corr(wine$HarvestRain, wine$WinterRain)
cor(wine$HarvestRain, wine$WinterRain)
wineTest = read.csv("wine_test.csv")
str(wineTest)
predictTest = predict(model4, newdata=wineTest)
predictTest
SSE= sum((wineTest$Price - predictTest)^2)
SST = sum((wineTest$Price - mean(wine$Price))^2)
1- SSE/SST
