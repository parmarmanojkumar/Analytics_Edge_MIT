demo()
glm()
GLM.VR
glm.vr
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("manipulate", "mgcv"))
clear
close
exit
sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
exit()
quit
1 + 26+40+34+23+26+20+30+15
1 + 26+40+34+23+26+20+30+15 / 60
(1 + 26+40+34+23+26+20+30+15) / 60
(1+6+17+10+15+6+7+5) / 60
(1+8+7+8+4)
1+19+29+22+29+27+18+30+38
(1+19+29+22+29+27+18+30+38)/60
q()
sd(c(5,8,12))
which.min(c(4,1,6))
source('~/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2/03_Assignment/pisa_assignment.R')
setwd('~/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2/01_Lecture/')
ls
ls()
getwd()
dir()
baseball = read.csv("baseball.csv")
str(baseball)
moneyball = subset(baseball, Year < 2002)
str(moneyball)
moneyball$RD = moneyball$RS - moneyball$R
A
moneyball$RD = moneyball$RS - moneyball$RA
str(moneyball)
plot(baseball$Year)
plot(baseball$Year, baseball$W)
plot(baseball$W, baseball$Year)
plotplot(baseball$W * baseball$League, baseball$Year)
plot(baseball$W * baseball$League, baseball$Year)
plot(baseball$W .* baseball$League, baseball$Year)
str(moneyball)
plot(moneyball$RD, moneyball$Year)
plot(moneyball$RD, moneyball$W)
WinsReg = lm(W ~ RD, data = moneyball)
summary(WinsReg)
predict
?predict
predict(WinsReg, 200)
713 - 614
(713 - 614) * 0.105766 + 80.881375
str(moneyball)
RunsReg = lm(RS~ OBP + SLG + BA, data = moneyball)
summary(RunsReg)
RunsReg = lm(RS~ OBP + SLG, data = moneyball)
summary(RunsReg)
RunsReg = lm(RS~ OBP, data = moneyball)
summary(RunsReg)
RunsReg = lm(RS~ OBP + BA, data = moneyball)
summary(RunsReg)
RunsReg = lm(RS~ SLG + BA, data = moneyball)
summary(RunsReg)
RunsReg = lm(RS~ SLG, data = moneyball)
summary(RunsReg)
RunsReg = lm(RS~ SLG + OBP, data = moneyball)
summary(RunsReg)
cor(moneyball$BA, moneyball$SLG, moneyball$OBP)
cor(c(moneyball$BA, moneyball$SLG, moneyball$OBP)
)
cor(c(moneyball$BA, moneyball$SLG)
cor(moneyball)
cor(moneyball$BA,moneyball$SLG)
cor(moneyball$BA,moneyball$OBP)
cor(moneyball$SLG,moneyball$OBP)
RunsAReg = lm(RA ~ OSLG + OOBP, data = moneyball)
summary(RunsAReg)
summary(RunsReg)
-804.63 + (0.311 * 2737.77) + (0.405 * 1584.91)
summary(RunsAReg)
-837.38 + (0.297*2913.6)+(*0.370 *1514.29)
-837.38 + (0.297*2913.6)+(0.370 *1514.29)
summary(RunsReg)
-804.63 + (0.338 * 2737.77) + (0.540 * 1584.91)
-804.63 + (0.391 * 2737.77) + (0.450 * 1584.91)
-804.63 + (0.369 * 2737.77) + (0.374 * 1584.91)
-804.63 + (0.313 * 2737.77) + (0.447 * 1584.91)
-804.63 + (0.361 * 2737.77) + (0.5 * 1584.91)
teamRank = c(1,2,3,3,4,4,4,4,5,5)
Win2012 = c(94,88,95,88,93,94,98,97,93,94)
Win2013 = c(97,97,92,93,92,96,94,96,92,90)
cor(teamRank,Win2012)
cor(teamRank,Win2013)
setwd("~/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2/02_Recitation")
rm(list = ls())
NBA = read.csv("NBA_train.csv")
str(NBA)
table(NBA$W,NBA$Playoffs)
plot(table(NBA$W,NBA$Playoffs))
NBA$PTSdiff = NBA$PTS - NBA$oppPTS
plot(NBA$W, NBA$PTSdiff)
plot(NBA$PTSdiff, NBA$W)
WinsReg = lm(W ~ PTSdiff, data=NBA)
summary(WinsReg)
WinsRegRed = step(WinsReg)
summary(WinsRegRed)
PointsReg = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + TOV + STL + BLK, data=NBA)
summary(PointsReg)
PointsReg = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + TOV + STL + BLK, data=NBA)
summary(PointsReg)
# Sum of Squared Errors
PointsReg$residuals
SSE = sum(PointsReg$residuals^2)
SSE
# Root mean squared error
RMSE = sqrt(SSE/nrow(NBA))
RMSE
mean(NBA$PTS)
# Remove insignifcant variables
summary(PointsReg)
PointsReg2 = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + STL + BLK, data=NBA)
summary(PointsReg2)
PointsReg3 = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + STL + BLK, data=NBA)
summary(PointsReg3)
PointsReg4 = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + STL, data=NBA)
summary(PointsReg4)
# Compute SSE and RMSE for new model
SSE_4 = sum(PointsReg4$residuals^2)
RMSE_4 = sqrt(SSE_4/nrow(NBA))
SSE_4
RMSE_4
NBA_test = read.csv("NBA_test.csv")
# Make predictions on test set
PointsPredictions = predict(PointsReg4, newdata=NBA_test)
# Compute out-of-sample R^2
SSE = sum((PointsPredictions - NBA_test$PTS)^2)
SST = sum((mean(NBA$PTS) - NBA_test$PTS)^2)
R2 = 1 - SSE/SST
R2
RMSE = sqrt(SSE/nrow(NBA_test))
RMSE
setwd("~/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2/03_Assignment")
rm(list = ls())
source('~/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2/03_Assignment/pisa_assignment.R', echo=TRUE)
pisaTest = relevel(pisaTest$raceeth,"White")
pisaTest = read.csv("pisa2009test.csv")
pisaTest$raceeth = relevel(pisaTest$raceeth,"White")
pisaTrain$raceeth = relevel(pisaTrain$raceeth,"White")
str(pisaTest)
lmscore = lm(readingScore ~ ., data = pisaTrain)
summary(lmscore)
SSE= sum(lmscore$residuals ^2)
RMSE = sqrt(SSE/nrow(pisaTrain))
RMSE
RMSE = sqrt(mean(lmScore$residuals^2))
29.54 * 2
predReadingScore = predict(lmscore,newdata = pisaTest)
summary(predReadingScore)
637.7 - 353.2
SSE_M = sum((predReadingScore - pisaTest$readingScore)^2)
SSE_M = sum((predReadingScore - pisaTest$readingScore)^2, rm.na = T)
?sum
SSE_M = sum((predReadingScore - pisaTest$readingScore)^2, na.rm = T)
SSE_M
RMSE_M = sqrt(SSE_M/nrow(pisaTest))
RMSE_M
nrow(pisaTest)
nrow(pisaTest, na.rm = T)
is.na(predReadingScore)
sum(is.na(predReadingScore))
RMSE_M = sqrt(SSE_M/(nrow(pisaTest) - sum(is.na(predReadingScore))))
RMSE_M
?predict
predReadingScore = predict(lmscore,newdata = pisaTest, na.rm = T)
summary(predReadingScore)
basePredict = mean(pisaTrain$readingScore, na.rm = T)
basePredict
SST_M = sum((pisaTrain$readingScore - basePredict)^2, na.rm = T)
SST_M
SST_M = sum((pisaTrain$readingScore - basePredict)^2)
SST_M
SST_M = sum((pisaTest$readingScore - basePredict)^2)
SST_M
basePredict = mean(pisaTrain$readingScore)
SST_M= sum((mean(pisaTrain$readingScore) - pisaTest$readingScore)^2)
SST_M
summary(pisaTrain$readingScore)
summary(pisaTest$readingScore)
pisaTest = read.csv("pisa2009test.csv")
pisaTest$raceeth = relevel(pisaTest$raceeth,"White")
pisaTrain$raceeth = relevel(pisaTrain$raceeth,"White")
lmscore = lm(readingScore ~ ., data = pisaTrain)
summary(lmscore)
predReadingScore = predict(lmscore,newdata = pisaTest)
summary(predReadingScore)
SSE_M = sum((predReadingScore - pisaTest$readingScore)^2, na.rm = T)
RMSE_M = sqrt(SSE_M/(nrow(pisaTest) - sum(is.na(predReadingScore))))
RMSE_M
basePredict = mean(pisaTrain$readingScore)
SST_M = sum((pisaTest$readingScore - basePredict)^2)
SST_M= sum((mean(pisaTrain$readingScore) - pisaTest$readingScore)^2)
SST_M
SST_M = sum((basePredict - pisaTest$readingScore)^2, na.rm = T)
baseline = mean(pisaTrain$readingScore)
sum((baseline-pisaTest$readingScore)^2)
R2 = 1- SSE_M / SST_M
R2
1 - 5762082/7802354
sum((baseline-pisaTest$readingScore)^2)
7802354 - 15105921
sum((baseline-pisaTest$readingScore))
sum(abs(baseline-pisaTest$readingScore))
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
summary(FluTrain$ILI)
which.max(FluTrain$ILI)
FluTrain[which.max(FluTrain$ILI)]
FluTrain[which.max(FluTrain$ILI),]
FluTrain[which.max(FluTrain$Queries),]
hist(FluTrain$ILI)
plot(log(FluTrain$ILI),FluTrain$Queries)
plot(FluTrain$Queries,log(FluTrain$ILI))
FluTrain$logILI = log(FluTrain$ILI)
FluTrend1 = lm(logILI ~ Queries, data=FluTrain)
FluTrend1t = lm(log(ILI) ~ Queries, data=FluTrain)
summary(FluTrend1)
summary(FluTrend1t)
FluTrain = read.csv("FluTrain.csv")
FluTrend1 = lm(log(ILI) ~ Queries, data=FluTrain)
summary(FluTrend1)
cor(log(FluTrain$ILI), FluTrain$Queries)
cor(log(FluTrain$ILI), FluTrain$Queries) ^ 2
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
FluTrain
?match
FluTest
PredTest1[11]
PredTest1[which(FluTest$Week == "2012-03-11 - 2012-03-17")]
weekindex = [which(FluTest$Week == "2012-03-11 - 2012-03-17")]
PredTest1[which(FluTest$Week == "2012-03-11 - 2012-03-17")]
weekindex = which(FluTest$Week == "2012-03-11 - 2012-03-17")
actval= FluTest$ILI[weekindex]
relerr= (actval - predval)/actval
relerr= (actval - predval)/actval
predval= PredTest1[weekindex]
actval= FluTest$ILI[weekindex]
relerr= (actval - predval)/actval
relerr
SSE = sum((PredTest1 - FluTest$ILI)^2)
RMSE = sqrt(SSE/nrow(SSE))
RMSE = sqrt(SSE/nrow(FluTest))
RMSE
install.packages("zoo")
library(zoo)
ILILag2 = lag(zoo(FluTrain$ILI), -2, na.pad=TRUE)
FluTrain$ILILag2 = coredata(ILILag2)
summary(ILILag2)
plot(log(FluTrain$ILI),ILILag2)
cor(log(FluTrain$ILI),ILILag2)
cor(log(FluTrain$ILI),ILILag2 , na.rm = T)
cor(log(FluTrain$ILI),ILILag2 , rm.na = T)
cor(?)
?cor
cor(log(FluTrain$ILI),ILILag2 , na.rm = T)
cor( log(FluTrain$ILI) , ILILag2 , na.rm = T)
ILILag2
cor( log(FluTrain$ILI[3:]) , ILILag2[3:] , na.rm = T)
plot(log(FluTrain$ILILag2), log(FluTrain$ILI))
summary(FluTrend1)
FluTrend2 = lm(log(ILI) ~ Queries + log(ILILag2), data = FluTrain)
summary(FluTrend2)
ILILag2 = lag(zoo(FluTest$ILI), -2, na.pad=TRUE)
FluTest$ILILag2 = coredata(ILILag2)
FlueTest$ILILag2[1:5]
FluTest$ILILag2[1:5]
FluTest$ILI[1:3]
FluTest$ILI[-1]
FluTest$ILI[-45]
nrow(FluTest)
nrow(FluTrain)
FluTest$ILILag2[1:2] = FluTrain$ILI[nrow(FluTrain)-1 : nrow(FluTrain)]
FluTrain$ILI[nrow(FluTrain) - 1:nrow(FluTrain)]
FluTrain$ILI[(nrow(FluTrain)-1) : nrow(FluTrain)]
FluTest$ILILag2[1:2] = FluTrain$ILI[(nrow(FluTrain)-1) : nrow(FluTrain)]
FluTest$ILILag2[1:2]
PredTest2 = exp(predict(FluTrend2, newdata=FluTest))
SSE = sum((PredTest2- FluTest$ILI)^2)
RMSE = sqrt(SSE/nrow(FluTest))
RMSE
quit()
