demo()
glm()
GLM.VR
glm.vr
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("manipulate", "mgcv"))
clear
close
exit
sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
exit()
quit
1 + 26+40+34+23+26+20+30+15
1 + 26+40+34+23+26+20+30+15 / 60
(1 + 26+40+34+23+26+20+30+15) / 60
(1+6+17+10+15+6+7+5) / 60
(1+8+7+8+4)
1+19+29+22+29+27+18+30+38
(1+19+29+22+29+27+18+30+38)/60
q()
sd(c(5,8,12))
which.min(c(4,1,6))
60 * (15/24)^(1.3-1)
1.71(515-490)
1.71*(515-490)
101*1000*30/ (1200 * 8.314)
(101*1000*30/ (1200 * 8.314)) - 273
10 * (10/7)^2
4.18 * 65
16*8.314*373.15
30 * (.08 *22.6)^1.3
1000*5 * 3.14 * 1.5^2
1000*5 * 3.14 * (1.5)^2
5.34^2 * 936 / 30
333 * (24/15)^0.3
333 * (15/24)^0.3
(101*1000*15*20*5)/(8.314*298.15)
(28.966*101*15*20*5)/(8.314*298.15)
15 * (7/8)^2
quit(0)
exit(0)
exit()
quit("yes")
setwd("/Users/VirKrupa/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2")
getwd
getwd()
setwd("/Users/VirKrupa/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2/03_Assignment/")
source('~/Documents/01_Courses/13_Analytics_edge_MIT/02_Unit2/03_Assignment/state_assignment.R', echo=TRUE)
LEM1 = lm(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad +
Frost, data = statedata)
summary(LEM1)
LEM1 = lm(Life.Exp ~ Population + Income + Murder + HS.Grad +
Frost, data = statedata)
summary(LEM1)
LEM1 = lm(Life.Exp ~ Income + Murder + HS.Grad +
Frost, data = statedata)
summary(LEM1)
LEM2 = lm(Life.Exp ~ Income + Population + HS.Grad +
Frost, data = statedata)
summary(LEM2)
LEM2 = lm(Life.Exp ~ Illiteracy + Murder + HS.Grad +
Frost, data = statedata)
summary(LEM2)
LEM3 = lm(Life.Exp ~ Population + Murder + HS.Grad +
Frost, data = statedata)
summary(LEM3)
summary(LEM1)
predictLE = predict(LEM3)
statedata$predictLE = predictLE
str(statedata)
statedata$state.name(which.min(statedata$predictLE))
statedata$state.name[which.min(statedata$predictLE)]
statedata$state.name[which.min(statedata$Life.Exp)]
statedata$state.name(which.max(statedata$predictLE))
statedata$state.name[which.max(statedata$predictLE)]
statedata$state.name[which.max(statedata$predictLE)]
statedata$state.name[which.max(statedata$Life.Exp)]
statedata$lediff = statedata$predictLE - statedata$Life.Exp
statedata$lediff = abs(statedata$predictLE - statedata$Life.Exp)
statedata$state.name[which.min(statedata$lediff)]
statedata$state.name[which.max(statedata$lediff)]
rm(list = ls())
elantrasale = read.csv("elantra.csv")
str(elantrasale)
elantrasale = read.csv("elantra.csv")
str(elantrasale)
esTrain = subset(elantrasale, Year <= 2012)
esTest = subset(elantrasale, Year > 2012)
summary(esTrain)
summary(esTest)
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Elm = lm(ElantraSales ~ Unemployment + Queries + CPI_energy + CPI_all,
data = ElantraTrain)
summary(Elm)
rm(Elm)
Elantralm = lm(ElantraSales ~ Unemployment + Queries + CPI_energy + CPI_all,
data = ElantraTrain)
summary(Elantralm)
ElantralmMonth = lm(ElantraSales ~ Unemployment + Queries + CPI_energy + CPI_all + Month,
data = ElantraTrain)
summary(ElantralmMonth)
110.69 * 2
110.69 * 5
110.69 * 4
ElantraTrain$Month.F = as.factor(ElantraTrain$Month)
str(ElantraTrain)
str(ElantraTrain)
ElantralmMonth.F = lm(ElantraSales ~ Unemployment + Queries + CPI_energy + CPI_all + Month.F,
data = ElantraTrain)
summary(ElantralmMonth.F)
corr(ElantraTrain)
cor(ElantraTrain)
cor(as.numeric(ElantraTrain))
cor(c(ElantraTrain$Month,ElantraTrain$Queries,ElantraTrain$Unemployment))
cor(ElantraTrain$CPI_energy,ElantraTrain$Month)
cor(ElantraTrain$CPI_energy,ElantraTrain$Unemployment)
cor(ElantraTrain$CPI_energy,ElantraTrain$Queries)
cor(ElantraTrain$CPI_energy,ElantraTrain$CPI_all)
cor(ElantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
cor(ElantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
ElantralmMonthRed = lm(ElantraSales ~ Unemployment + Queries + CPI_energy + CPI_all + Month.F,
data = ElantraTrain)
summary(ElantralmMonthRed)
ElantralmMonthRed = lm(ElantraSales ~ Unemployment + CPI_energy + CPI_all + Month.F,
data = ElantraTrain)
summary(ElantralmMonthRed)
ElantraTest$Month.F = as.factor(ElantraTest$Month)
predictSale = predict(ElantralmMonthRed, newdata = ElantraTest)
SSE = sum((predictSale - ElantraTest$ElantraSales)^2)
SSE
baselm = mean(ElantraTrain$ElantraSales)
baselm
SST = sum((baselm - ElantraTest$ElantraSales)^2)
SST
R2 = 1- (SSE/SST)
R2
maxabserr = max(abs(predictSale - ElantraTest$ElantraSales))
ElantraTest$err = (abs(predictSale - ElantraTest$ElantraSales))
maxabserr = max(ElantraTest$err)
ElantraTest[which.max(ElantraTest$err),]
rm(list = ls())
exit("no")
quit()
